From b63c104416416e1a2d6ed3907cb5ccc35957e7ae Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Przemys=C5=82aw=20B=C5=82aszk=C3=B3w?=
 <pblaszkow5@gmail.com>
Date: Sun, 28 Apr 2013 21:06:59 +0200
Subject: [PATCH] Adapt TI bluedroid stack for mogami board
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Author: Przemysław Błaszków <pblaszkow5@gmail.com>
Signed-off-by: Michael Bestas <mikeioannina@gmail.com>

Change-Id: I005edbfd582e564e9f14e537c38e8c4c34f67504
---
 arch/arm/mach-msm/board-semc_mogami.c | 50 ++++++++++++++++++++++++++++++-----
 1 file changed, 44 insertions(+), 6 deletions(-)

diff --git a/arch/arm/mach-msm/board-semc_mogami.c b/arch/arm/mach-msm/board-semc_mogami.c
index 96454fe..5f3b865 100644
--- a/arch/arm/mach-msm/board-semc_mogami.c
+++ b/arch/arm/mach-msm/board-semc_mogami.c
@@ -34,6 +34,8 @@
 #include <linux/power_supply.h>
 #include <linux/i2c/isa1200.h>
 #include <linux/i2c/tsc2007.h>
+#include <linux/skbuff.h>
+#include <linux/ti_wilink_st.h>
 #include <linux/input/kp_flip_switch.h>
 #include <linux/leds-pmic8058.h>
 #include <linux/input/cy8c_ts.h>
@@ -274,6 +276,8 @@
 #define VREG_L15	"gp6"	/* LCD */
 #define VREG_L20	"gp13"	/* Touch */
 
+#define WILINK_UART_DEV_NAME    "/dev/ttyHS0"
+#define MOGAMI_BT_GPIO 103
 
 /* Platform specific HW-ID GPIO mask */
 static const u8 hw_id_gpios[] = {150, 149, 148, 43};
@@ -5320,10 +5324,46 @@ static int bluetooth_power(int on)
 	return 0;
 }
 
-static struct platform_device mogami_device_rfkill = {
-	.name = "mogami-rfkill",
-	.dev.platform_data = &bluetooth_power,
+static int plat_chip_enable(struct kim_data_s *data)
+{
+	bluetooth_power(1);
+	return 1;
+}
+
+static int plat_chip_disable(struct kim_data_s *data)
+{
+	bluetooth_power(0);
+	return 1;
+}
+
+/* wl128x BT, FM, GPS connectivity chip */
+static struct ti_st_plat_data wilink_pdata = {
+	.dev_name = WILINK_UART_DEV_NAME,
+	.flow_cntrl = 1,
+	.baud_rate = 3000000,
+	.chip_enable = plat_chip_enable,
+	.chip_disable = plat_chip_disable,
+};
+
+static struct platform_device btwilink_device = {
+	.name = "btwilink",
+	.id = -1,
 };
+
+/* wl127x BT, FM, GPS connectivity chip */
+static struct platform_device wl1271_device = {
+	.name   = "kim",
+	.id     = -1,
+	.dev.platform_data = &wilink_pdata,
+};
+
+static noinline void __init mogami_bt_wl1271(void)
+{
+	platform_device_register(&wl1271_device);
+	platform_device_register(&btwilink_device);
+
+	return;
+}
 #endif
 
 static struct regulator *atv_s4, *atv_ldo9;
@@ -5725,9 +5765,6 @@ struct platform_device msm_device_sdio_al = {
 #ifdef CONFIG_MOGAMI_SLIDER
 	&slider_device_mogami,
 #endif
-#ifdef CONFIG_BT
-	&mogami_device_rfkill,
-#endif
 #ifdef CONFIG_ANDROID_RAM_CONSOLE
 	&ram_console_device,
 #endif
@@ -7245,6 +7282,7 @@ static void __init msm7x30_init(void)
 	msm_qsd_spi_init();
 	msm7x30_init_nand();
 #ifdef CONFIG_BT
+	mogami_bt_wl1271();
 	bluetooth_power(0);
 #endif
 	atv_dac_power_init();
-- 
1.8.1.6

diff --git a/include/linux/ti_wilink_st.h b/include/linux/ti_wilink_st.h
index b004e55..932b763 100644
--- a/include/linux/ti_wilink_st.h
+++ b/include/linux/ti_wilink_st.h
@@ -25,6 +25,8 @@
 #ifndef TI_WILINK_ST_H
 #define TI_WILINK_ST_H
 
+#include <linux/skbuff.h>
+
 /**
  * enum proto-type - The protocol on WiLink chips which share a
  *	common physical interface like UART.
@@ -279,9 +281,10 @@ struct kim_data_s {
 long st_kim_start(void *);
 long st_kim_stop(void *);
 
-void st_kim_recv(void *, const unsigned char *, long count);
 void st_kim_complete(void *);
 void kim_st_list_protocols(struct st_data_s *, void *);
+void st_kim_recv(void *, const unsigned char *, long);
+
 
 /*
  * BTS headers
@@ -410,7 +413,28 @@ struct gps_event_hdr {
 	u16 plen;
 } __attribute__ ((packed));
 
-/* platform data */
+/**
+ * struct ti_st_plat_data - platform data shared between ST driver and
+ *	platform specific board file which adds the ST device.
+ * @nshutdown_gpio: Host's GPIO line to which chip's BT_EN is connected.
+ * @dev_name: The UART/TTY name to which chip is interfaced. (eg: /dev/ttyS1)
+ * @flow_cntrl: Should always be 1, since UART's CTS/RTS is used for PM
+ *	purposes.
+ * @baud_rate: The baud rate supported by the Host UART controller, this will
+ *	be shared across with the chip via a HCI VS command from User-Space Init
+ *	Mgr application.
+ * @suspend:
+ * @resume: legacy PM routines hooked to platform specific board file, so as
+ *	to take chip-host interface specific action.
+ * @chip_enable:
+ * @chip_disable: Platform/Interface specific mux mode setting, GPIO
+ *	configuring, Host side PM disabling etc.. can be done here.
+ * @chip_asleep:
+ * @chip_awake: Chip specific deep sleep states is communicated to Host
+ *	specific board-xx.c to take actions such as cut UART clocks when chip
+ *	asleep or run host faster when chip awake etc..
+ *
+ */
 struct ti_st_plat_data {
 	long nshutdown_gpio;
 	unsigned char dev_name[UART_DEV_NAME_LEN]; /* uart name */
@@ -418,6 +442,10 @@ struct ti_st_plat_data {
 	unsigned long baud_rate;
 	int (*suspend)(struct platform_device *, pm_message_t);
 	int (*resume)(struct platform_device *);
+	int (*chip_enable) (struct kim_data_s *);
+	int (*chip_disable) (struct kim_data_s *);
+	int (*chip_asleep) (struct kim_data_s *);
+	int (*chip_awake) (struct kim_data_s *);
 };
 
 #endif /* TI_WILINK_ST_H */
